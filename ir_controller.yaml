esphome:
  name: ir-controller
  project:
    name: "cia01e3.ir-controller"
    version: "2.0.0"
  on_boot:
    priority: -100
    then:
      - lambda: |-
          if(id(reverse_switch).state) {
            id(reverse_flag) = 0x7f8;
          } else {
            id(reverse_flag) = 0x0;
          }

web_server:
  port: 80
  version: 3
  sorting_groups:
    - id: sorting_group_switch
      name: "Switch"
      sorting_weight: 10
    - id: sorting_group_button
      name: "Button"
      sorting_weight: 20
    - id: sorting_group_extra
      name: "Extra"
      sorting_weight: 30

esp8266:
  board: esp_wroom_02

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_passwd

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ir-Controller Fallback Hotspot"
    password: !secret ap_passwd

captive_portal:

status_led:
  pin: 15

remote_transmitter:
  - id: rc_transmitter
    pin: 13
    carrier_duty_percent: 100%
  
  - id: ir_transmitter
    pin: 14
    carrier_duty_percent: 50%

remote_receiver:
  - id: irrecv
    pin: 5
    tolerance: 15%
    #unknown_threshold: 12
    idle: 10ms
    dump: all
    buffer_size: 2kb

    # 当接收到信号时触发处理
    # on_value:
    #   then:
    #     - logger.log:
    #       level: INFO
    #       format: "ir_dumpn -> value = %s addr = %d command = %d decode_type = %d"
    #       args: ["'{{ irrecv.received_code }}'", "'{{ irrecv.received_address }}'", "'{{ irrecv.received_command }}'", "'{{ irrecv.received_type }}'"]

globals:
  - id: reverse_flag
    type: uint16_t
    restore_value: no
    initial_value: "0"

binary_sensor:
  - platform: gpio
    id: ir_dump_pin
    name: "IR dump"
    icon: "mdi:record-rec"
    pin:
      number: 4
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 10ms
    web_server:
      sorting_weight: 12

  # - interval: 100ms
  #   then:
  #     - lambda: |-
  #         decode_results results;
  #         if (id(ir_dump_pin).state && id(irrecv)->decode(&results)) {
  #           if (results.overflow) ESP_LOGW("ir_dump", "Buffer is full");
  #           ESP_LOGI(, uint64ToString(results.value, HEX), results.address, results.command, results.decode_type);
  #         }

  #小区门禁
  # - interval: 500ms
  #   then:
  #     - if:
  #         condition:
  #           wifi.connected
  #         then:
  #         else:
  #           remote_transmitter.transmit_rc_switch_raw:
  #             code: '00101110100011010001000'
  #             repeat:
  #               times: 10
  #               wait_time: 0ms
  #             protocol: 
  #               #The pulse length of the protocol - how many microseconds one pulse should last for.
  #               pulse_length: 260

button:
  - platform: template
    name: Rotate Right
    id: clockwise
    # friendly_name: 顺时针转动
    # Optional variables:
    icon: "mdi:rotate-right"
    web_server:
      sorting_group_id: sorting_group_button
      sorting_weight: 0
    on_press:
      - remote_transmitter.transmit_nec:
          transmitter_id: ir_transmitter
          address: 0xff00
          command: 0xfe01
          command_repeats: 1

  - platform: template
    name: Rotate Left
    id: anticlockwise
    # friendly_name : 逆时针转动
    # Optional variables:
    icon: "mdi:rotate-left"
    web_server:
      sorting_weight: 1
      sorting_group_id: sorting_group_button
    on_press:
      - remote_transmitter.transmit_nec:
          transmitter_id: ir_transmitter
          address: 0xff00
          command: 0xf609
          command_repeats: 1

  - platform: template
    name: Send RC1
    id: send_rc1
    # friendly_name : 射频开关1
    # Optional variables:
    icon: "mdi:radio-tower"
    web_server:
      sorting_weight: 2
      sorting_group_id: sorting_group_button
    on_press:
      - remote_transmitter.transmit_rc_switch_raw:
          transmitter_id: rc_transmitter
          code: '000111011100110110100100'
          repeat:
            times: 10
            wait_time: 0ms
          protocol: 
            #The pulse length of the protocol - how many microseconds one pulse should last for.
            pulse_length: 320

  - platform: template
    name: Send RC2
    id: send_rc2
    # friendly_name : 射频开关2
    # Optional variables:
    icon: "mdi:radio-tower"
    web_server:
      sorting_weight: 2
      sorting_group_id: sorting_group_button
    on_press:
      - remote_transmitter.transmit_rc_switch_raw:
          transmitter_id: rc_transmitter
          code: '011111000101101001100100'
          repeat:
            times: 15
            wait_time: 0ms
          protocol: 
            #The pulse length of the protocol - how many microseconds one pulse should last for.
            pulse_length: 200

  - platform: template
    name: Send RC3
    id: send_rc3
    # friendly_name : 射频开关3
    # Optional variables:
    icon: "mdi:radio-tower"
    web_server:
      sorting_weight: 2
      sorting_group_id: sorting_group_button
    on_press:
      - remote_transmitter.transmit_rc_switch_raw:
          transmitter_id: rc_transmitter
          code: '110101101110100001100100'
          repeat:
            times: 12
            wait_time: 0ms
          protocol: 
            #The pulse length of the protocol - how many microseconds one pulse should last for.
            pulse_length: 200

switch:
  - platform: template
    id: switch1
    name: "Switch"
    icon: "mdi:lightbulb"
    web_server:
      sorting_weight: 2
      sorting_group_id: sorting_group_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF   # 让它恢复上次的状态
    turn_on_action:
      - remote_transmitter.transmit_nec:
          transmitter_id: ir_transmitter
          address: 0x00ff
          command: !lambda 'return 0xfe01 - id(reverse_flag);'
          command_repeats: 1
    turn_off_action:
      - remote_transmitter.transmit_nec:
          transmitter_id: ir_transmitter
          address: 0x00ff
          command: !lambda 'return 0xf609 + id(reverse_flag);'
          command_repeats: 1

  - platform: template
    id: reverse_switch
    name: "Reverse Switch"
    icon: "mdi:screen-rotation-alt"
    web_server:
      sorting_weight: 3
      sorting_group_id: sorting_group_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF 
    turn_on_action:
      - lambda: |-
          id(reverse_flag) = 0x7f8;
    turn_off_action:
      - lambda: |-
          id(reverse_flag) = 0x0;

time:
  - platform: sntp
    id: sntp_time
    timezone: Asia/Shanghai
    servers:
      - ntp.ntsc.ac.cn
      - ntp.aliyun.com
      - time.windows.com
    # on_time:
    #   - seconds: 0
    #     minutes: /1
    #     then:
    #       lambda: |-
    #         if (id(ac) && id(ac_off_time).is_valid() &&
    #             id(sntp_time).now() >= id(ac_off_time)) {
    #           if (id(switch1).state) {
    #             id(switch1).turn_off();
    #             ESP_LOGI("sntp_time", "[%s] Switch off", 
    #               id(sntp_time).now().strftime("%m-%d %H:%M:%S").c_str());
    #           }
    #           auto call = id(ac_timed_off).make_call();
    #           call.set_time("00:00:00");
    #           call.perform();
    #         }

# 倒计时关闭功能, 用不到
# datetime:
#   - platform: template
#     id: ac_timed_off
#     name: "Timed off"
#     icon: "mdi:calendar-alert"
#     type: time
#     initial_value: "00:00:00"
#     web_server:
#       sorting_weight: 1
#       sorting_group_id: sorting_group_extra
#     optimistic: yes
#     disabled_by_default: true
#     on_value:
#       then:
#         - lambda: |-
#             ESPTime time_set = id(ac_timed_off).state_as_esptime();
#             if (id(sntp_time).now().is_valid()) {
#               if (time_set.hour != 0 || time_set.minute != 0) {
#                 id(ac_off_time) = id(sntp_time).now();
#                 id(ac_off_time).hour += time_set.hour;
#                 id(ac_off_time).minute += time_set.minute;
#                 id(ac_off_time).second = 0;
#                 if (id(ac_off_time).minute > 59) {
#                   id(ac_off_time).hour += 1;
#                   id(ac_off_time).minute -= 59;
#                 }
#                 if (id(ac_off_time).hour > 23) {
#                   id(ac_off_time).day_of_month += 1;
#                   id(ac_off_time).hour -= 23;
#                 }
#                 id(ac_off_time).recalc_timestamp_local();
#                 ESP_LOGI("ac_timed_off", "[%s] Turn off at %s", 
#                   id(sntp_time).now().strftime("%m-%d %H:%M:%S").c_str(),
#                   id(ac_off_time).strftime("%m-%d %H:%M:%S").c_str());
#               } else {
#                 id(ac_off_time).year = 0;
#                 id(ac_off_time).month = 0;
#                 id(ac_off_time).day_of_month = 0;
#                 id(ac_off_time).hour = 0;
#                 id(ac_off_time).minute = 0;
#                 id(ac_off_time).second = 0;
#                 id(ac_off_time).recalc_timestamp_local();
#               }
#             } else
#               ESP_LOGW("ac_timed_off", "SNTP not finished yet.");
